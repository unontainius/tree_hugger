-- Drop existing objects first
DO $$ 
BEGIN
    -- Drop triggers
    DROP TRIGGER IF EXISTS update_cashflow_cells_updated_at ON cashflow_cells;
    DROP TRIGGER IF EXISTS update_cashflow_rows_updated_at ON cashflow_rows;
    
    -- Drop policies
    DROP POLICY IF EXISTS "Users can delete cells for their own rows" ON cashflow_cells;
    DROP POLICY IF EXISTS "Users can update cells for their own rows" ON cashflow_cells;
    DROP POLICY IF EXISTS "Users can insert cells for their own rows" ON cashflow_cells;
    DROP POLICY IF EXISTS "Users can view cells for their own rows" ON cashflow_cells;
    
    DROP POLICY IF EXISTS "Users can delete their own cashflow rows" ON cashflow_rows;
    DROP POLICY IF EXISTS "Users can update their own cashflow rows" ON cashflow_rows;
    DROP POLICY IF EXISTS "Users can insert their own cashflow rows" ON cashflow_rows;
    DROP POLICY IF EXISTS "Users can view their own cashflow rows" ON cashflow_rows;
    
    -- Drop function
    DROP FUNCTION IF EXISTS update_updated_at_column();
    
    -- Drop tables (in correct order due to foreign key constraints)
    DROP TABLE IF EXISTS cashflow_cells;
    DROP TABLE IF EXISTS cashflow_rows;
END $$;

-- Now recreate everything
-- Create cashflow_rows table
CREATE TABLE IF NOT EXISTS cashflow_rows (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
    name TEXT NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('income', 'expense')),
    group_name TEXT NOT NULL DEFAULT 'Other',
    is_recurring BOOLEAN DEFAULT false,
    recurring_amount DECIMAL(12,2),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Create cashflow_cells table
CREATE TABLE IF NOT EXISTS cashflow_cells (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    row_id BIGINT REFERENCES cashflow_rows(id) ON DELETE CASCADE,
    week_number INTEGER NOT NULL CHECK (week_number BETWEEN 1 AND 52),
    amount DECIMAL(12,2) NOT NULL DEFAULT 0,
    note TEXT,
    tags TEXT[],
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    UNIQUE(row_id, week_number)
);

-- Add RLS policies if they don't exist
DO $$ 
BEGIN
    -- Enable RLS if not already enabled
    IF NOT EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'cashflow_rows' 
        AND rowsecurity = true
    ) THEN
        ALTER TABLE cashflow_rows ENABLE ROW LEVEL SECURITY;
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_tables 
        WHERE schemaname = 'public' 
        AND tablename = 'cashflow_cells' 
        AND rowsecurity = true
    ) THEN
        ALTER TABLE cashflow_cells ENABLE ROW LEVEL SECURITY;
    END IF;

    -- Create policies if they don't exist
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_rows' 
        AND policyname = 'Users can view their own cashflow rows'
    ) THEN
        CREATE POLICY "Users can view their own cashflow rows"
            ON cashflow_rows FOR SELECT
            USING (auth.uid() = user_id);
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_rows' 
        AND policyname = 'Users can insert their own cashflow rows'
    ) THEN
        CREATE POLICY "Users can insert their own cashflow rows"
            ON cashflow_rows FOR INSERT
            WITH CHECK (auth.uid() = user_id);
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_rows' 
        AND policyname = 'Users can update their own cashflow rows'
    ) THEN
        CREATE POLICY "Users can update their own cashflow rows"
            ON cashflow_rows FOR UPDATE
            USING (auth.uid() = user_id)
            WITH CHECK (auth.uid() = user_id);
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_rows' 
        AND policyname = 'Users can delete their own cashflow rows'
    ) THEN
        CREATE POLICY "Users can delete their own cashflow rows"
            ON cashflow_rows FOR DELETE
            USING (auth.uid() = user_id);
    END IF;

    -- Policies for cashflow_cells
    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_cells' 
        AND policyname = 'Users can view cells for their own rows'
    ) THEN
        CREATE POLICY "Users can view cells for their own rows"
            ON cashflow_cells FOR SELECT
            USING (EXISTS (
                SELECT 1 FROM cashflow_rows
                WHERE cashflow_rows.id = cashflow_cells.row_id
                AND cashflow_rows.user_id = auth.uid()
            ));
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_cells' 
        AND policyname = 'Users can insert cells for their own rows'
    ) THEN
        CREATE POLICY "Users can insert cells for their own rows"
            ON cashflow_cells FOR INSERT
            WITH CHECK (EXISTS (
                SELECT 1 FROM cashflow_rows
                WHERE cashflow_rows.id = cashflow_cells.row_id
                AND cashflow_rows.user_id = auth.uid()
            ));
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_cells' 
        AND policyname = 'Users can update cells for their own rows'
    ) THEN
        CREATE POLICY "Users can update cells for their own rows"
            ON cashflow_cells FOR UPDATE
            USING (EXISTS (
                SELECT 1 FROM cashflow_rows
                WHERE cashflow_rows.id = cashflow_cells.row_id
                AND cashflow_rows.user_id = auth.uid()
            ))
            WITH CHECK (EXISTS (
                SELECT 1 FROM cashflow_rows
                WHERE cashflow_rows.id = cashflow_cells.row_id
                AND cashflow_rows.user_id = auth.uid()
            ));
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_policies 
        WHERE tablename = 'cashflow_cells' 
        AND policyname = 'Users can delete cells for their own rows'
    ) THEN
        CREATE POLICY "Users can delete cells for their own rows"
            ON cashflow_cells FOR DELETE
            USING (EXISTS (
                SELECT 1 FROM cashflow_rows
                WHERE cashflow_rows.id = cashflow_cells.row_id
                AND cashflow_rows.user_id = auth.uid()
            ));
    END IF;
END $$;

-- Create function to update updated_at timestamp if it doesn't exist
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Create triggers if they don't exist
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_trigger 
        WHERE tgname = 'update_cashflow_rows_updated_at'
    ) THEN
        CREATE TRIGGER update_cashflow_rows_updated_at
            BEFORE UPDATE ON cashflow_rows
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;

    IF NOT EXISTS (
        SELECT 1 FROM pg_trigger 
        WHERE tgname = 'update_cashflow_cells_updated_at'
    ) THEN
        CREATE TRIGGER update_cashflow_cells_updated_at
            BEFORE UPDATE ON cashflow_cells
            FOR EACH ROW
            EXECUTE FUNCTION update_updated_at_column();
    END IF;
END $$; 